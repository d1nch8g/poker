// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        name,
        email,
        verified,
        is_admin,
        encrypted_wallet,
        passwhash
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, verified, is_admin, encrypted_wallet, passwhash
`

type CreateUserParams struct {
	Name            string `json:"name"`
	Email           string `json:"email"`
	Verified        bool   `json:"verified"`
	IsAdmin         bool   `json:"is_admin"`
	EncryptedWallet string `json:"encrypted_wallet"`
	Passwhash       string `json:"passwhash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Verified,
		arg.IsAdmin,
		arg.EncryptedWallet,
		arg.Passwhash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Verified,
		&i.IsAdmin,
		&i.EncryptedWallet,
		&i.Passwhash,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, verified, is_admin, encrypted_wallet, passwhash
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Verified,
		&i.IsAdmin,
		&i.EncryptedWallet,
		&i.Passwhash,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, verified, is_admin, encrypted_wallet, passwhash
FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Verified,
			&i.IsAdmin,
			&i.EncryptedWallet,
			&i.Passwhash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
